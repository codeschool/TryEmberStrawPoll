{"version":3,"sources":["ember-qunit/module-for-component.js","ember-qunit/module-for-model.js","ember-qunit/module-for.js","ember-qunit/only.js","ember-qunit/qunit-module.js","ember-qunit/test-wrapper.js","ember-qunit/test.js","ember-qunit.js","ember-test-helpers/build-registry.js","ember-test-helpers/has-ember-version.js","ember-test-helpers/test-context.js","ember-test-helpers/test-module-for-component.js","ember-test-helpers/test-module-for-model.js","ember-test-helpers/test-module.js","ember-test-helpers/test-resolver.js","ember-test-helpers/wait.js","ember-test-helpers.js","klassy.js","qunit.js"],"sourcesContent":["define('ember-qunit/module-for-component', ['exports', './qunit-module', 'ember-test-helpers'], function (exports, _qunitModule, _emberTestHelpers) {\n  'use strict';\n\n  exports['default'] = moduleForComponent;\n\n  function moduleForComponent(name, description, callbacks) {\n    _qunitModule.createModule(_emberTestHelpers.TestModuleForComponent, name, description, callbacks);\n  }\n});","define('ember-qunit/module-for-model', ['exports', './qunit-module', 'ember-test-helpers'], function (exports, _qunitModule, _emberTestHelpers) {\n  'use strict';\n\n  exports['default'] = moduleForModel;\n\n  function moduleForModel(name, description, callbacks) {\n    _qunitModule.createModule(_emberTestHelpers.TestModuleForModel, name, description, callbacks);\n  }\n});","define('ember-qunit/module-for', ['exports', './qunit-module', 'ember-test-helpers'], function (exports, _qunitModule, _emberTestHelpers) {\n  'use strict';\n\n  exports['default'] = moduleFor;\n\n  function moduleFor(name, description, callbacks) {\n    _qunitModule.createModule(_emberTestHelpers.TestModule, name, description, callbacks);\n  }\n});","define('ember-qunit/only', ['exports', 'ember-qunit/test-wrapper', 'qunit'], function (exports, _emberQunitTestWrapper, _qunit) {\n  'use strict';\n\n  exports['default'] = only;\n\n  function only() /* testName, expected, callback, async */{\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; ++_key) {\n      args[_key] = arguments[_key];\n    }\n    args.unshift(_qunit.only);\n    _emberQunitTestWrapper['default'].apply(null, args);\n  }\n});","define('ember-qunit/qunit-module', ['exports', 'qunit'], function (exports, _qunit) {\n  'use strict';\n\n  exports.createModule = createModule;\n\n  function beforeEachCallback(callbacks) {\n    if (typeof callbacks !== 'object') {\n      return;\n    }\n    if (!callbacks) {\n      return;\n    }\n\n    var beforeEach;\n\n    if (callbacks.setup) {\n      beforeEach = callbacks.setup;\n      delete callbacks.setup;\n    }\n\n    if (callbacks.beforeEach) {\n      beforeEach = callbacks.beforeEach;\n      delete callbacks.beforeEach;\n    }\n\n    return beforeEach;\n  }\n\n  function afterEachCallback(callbacks) {\n    if (typeof callbacks !== 'object') {\n      return;\n    }\n    if (!callbacks) {\n      return;\n    }\n\n    var afterEach;\n\n    if (callbacks.teardown) {\n      afterEach = callbacks.teardown;\n      delete callbacks.teardown;\n    }\n\n    if (callbacks.afterEach) {\n      afterEach = callbacks.afterEach;\n      delete callbacks.afterEach;\n    }\n\n    return afterEach;\n  }\n\n  function createModule(Constructor, name, description, callbacks) {\n    var beforeEach = beforeEachCallback(callbacks || description);\n    var afterEach = afterEachCallback(callbacks || description);\n\n    var module = new Constructor(name, description, callbacks);\n\n    _qunit.module(module.name, {\n      setup: function setup(assert) {\n        var done = assert.async();\n        return module.setup().then(function () {\n          if (beforeEach) {\n            beforeEach.call(module.context, assert);\n          }\n        })['finally'](done);\n      },\n\n      teardown: function teardown(assert) {\n        if (afterEach) {\n          afterEach.call(module.context, assert);\n        }\n        var done = assert.async();\n        return module.teardown()['finally'](done);\n      }\n    });\n  }\n});","define('ember-qunit/test-wrapper', ['exports', 'ember', 'ember-test-helpers'], function (exports, _ember, _emberTestHelpers) {\n  'use strict';\n\n  exports['default'] = testWrapper;\n\n  function testWrapper(qunit /*, testName, expected, callback, async */) {\n    var callback;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; ++_key) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    function wrapper() {\n      var context = _emberTestHelpers.getContext();\n\n      var result = callback.apply(context, arguments);\n\n      function failTestOnPromiseRejection(reason) {\n        var message;\n        if (reason instanceof Error) {\n          message = reason.stack;\n          if (reason.message && message.indexOf(reason.message) < 0) {\n            // PhantomJS has a `stack` that does not contain the actual\n            // exception message.\n            message = _ember['default'].inspect(reason) + \"\\n\" + message;\n          }\n        } else {\n          message = _ember['default'].inspect(reason);\n        }\n        ok(false, message);\n      }\n\n      _ember['default'].run(function () {\n        QUnit.stop();\n        _ember['default'].RSVP.Promise.resolve(result)['catch'](failTestOnPromiseRejection)['finally'](QUnit.start);\n      });\n    }\n\n    if (args.length === 2) {\n      callback = args.splice(1, 1, wrapper)[0];\n    } else {\n      callback = args.splice(2, 1, wrapper)[0];\n    }\n\n    qunit.apply(null, args);\n  }\n});","define('ember-qunit/test', ['exports', 'ember-qunit/test-wrapper', 'qunit'], function (exports, _emberQunitTestWrapper, _qunit) {\n  'use strict';\n\n  exports['default'] = test;\n\n  function test() /* testName, expected, callback, async */{\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; ++_key) {\n      args[_key] = arguments[_key];\n    }\n    args.unshift(_qunit.test);\n    _emberQunitTestWrapper['default'].apply(null, args);\n  }\n});","define('ember-qunit', ['exports', 'ember-qunit/module-for', 'ember-qunit/module-for-component', 'ember-qunit/module-for-model', 'ember-qunit/test', 'ember-qunit/only', 'ember-test-helpers'], function (exports, _emberQunitModuleFor, _emberQunitModuleForComponent, _emberQunitModuleForModel, _emberQunitTest, _emberQunitOnly, _emberTestHelpers) {\n  'use strict';\n\n  exports.moduleFor = _emberQunitModuleFor['default'];\n  exports.moduleForComponent = _emberQunitModuleForComponent['default'];\n  exports.moduleForModel = _emberQunitModuleForModel['default'];\n  exports.test = _emberQunitTest['default'];\n  exports.only = _emberQunitOnly['default'];\n  exports.setResolver = _emberTestHelpers.setResolver;\n});","define('ember-test-helpers/build-registry', ['exports', 'ember'], function (exports, _ember) {\n  /* globals global, self */\n\n  'use strict';\n\n  function exposeRegistryMethodsWithoutDeprecations(container) {\n    var methods = ['register', 'unregister', 'resolve', 'normalize', 'typeInjection', 'injection', 'factoryInjection', 'factoryTypeInjection', 'has', 'options', 'optionsForType'];\n\n    function exposeRegistryMethod(container, method) {\n      if (method in container) {\n        container[method] = function () {\n          return container._registry[method].apply(container._registry, arguments);\n        };\n      }\n    }\n\n    for (var i = 0, l = methods.length; i < l; i++) {\n      exposeRegistryMethod(container, methods[i]);\n    }\n  }\n\n  var Owner = (function () {\n    if (_ember['default']._RegistryProxyMixin && _ember['default']._ContainerProxyMixin) {\n      return _ember['default'].Object.extend(_ember['default']._RegistryProxyMixin, _ember['default']._ContainerProxyMixin);\n    }\n\n    return _ember['default'].Object.extend();\n  })();\n\n  exports['default'] = function (resolver) {\n    var fallbackRegistry, registry, container;\n    var namespace = _ember['default'].Object.create({\n      Resolver: { create: function create() {\n          return resolver;\n        } }\n    });\n\n    function register(name, factory) {\n      var thingToRegisterWith = registry || container;\n\n      if (!container.lookupFactory(name)) {\n        thingToRegisterWith.register(name, factory);\n      }\n    }\n\n    if (_ember['default'].Application.buildRegistry) {\n      fallbackRegistry = _ember['default'].Application.buildRegistry(namespace);\n      fallbackRegistry.register('component-lookup:main', _ember['default'].ComponentLookup);\n\n      registry = new _ember['default'].Registry({\n        fallback: fallbackRegistry\n      });\n\n      // these properties are set on the fallback registry by `buildRegistry`\n      // and on the primary registry within the ApplicationInstance constructor\n      // but we need to manually recreate them since ApplicationInstance's are not\n      // exposed externally\n      registry.normalizeFullName = fallbackRegistry.normalizeFullName;\n      registry.makeToString = fallbackRegistry.makeToString;\n      registry.describe = fallbackRegistry.describe;\n\n      var owner = Owner.create({\n        __registry__: registry,\n        __container__: null\n      });\n\n      container = registry.container({ owner: owner });\n      owner.__container__ = container;\n\n      exposeRegistryMethodsWithoutDeprecations(container);\n    } else {\n      container = _ember['default'].Application.buildContainer(namespace);\n      container.register('component-lookup:main', _ember['default'].ComponentLookup);\n    }\n\n    // Ember 1.10.0 did not properly add `view:toplevel` or `view:default`\n    // to the registry in Ember.Application.buildRegistry :(\n    //\n    // Ember 2.0.0 removed Ember.View as public API, so only do this when\n    // Ember.View is present\n    if (_ember['default'].View) {\n      register('view:toplevel', _ember['default'].View.extend());\n    }\n\n    // Ember 2.0.0 removed Ember._MetamorphView from the Ember global, so only\n    // do this when present\n    if (_ember['default']._MetamorphView) {\n      register('view:default', _ember['default']._MetamorphView);\n    }\n\n    var globalContext = typeof global === 'object' && global || self;\n    if (globalContext.DS) {\n      var DS = globalContext.DS;\n      if (DS._setupContainer) {\n        DS._setupContainer(registry || container);\n      } else {\n        register('transform:boolean', DS.BooleanTransform);\n        register('transform:date', DS.DateTransform);\n        register('transform:number', DS.NumberTransform);\n        register('transform:string', DS.StringTransform);\n        register('serializer:-default', DS.JSONSerializer);\n        register('serializer:-rest', DS.RESTSerializer);\n        register('adapter:-rest', DS.RESTAdapter);\n      }\n    }\n\n    return {\n      registry: registry,\n      container: container\n    };\n  };\n});","define('ember-test-helpers/has-ember-version', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = hasEmberVersion;\n\n  function hasEmberVersion(major, minor) {\n    var numbers = _ember['default'].VERSION.split('-')[0].split('.');\n    var actualMajor = parseInt(numbers[0], 10);\n    var actualMinor = parseInt(numbers[1], 10);\n    return actualMajor > major || actualMajor === major && actualMinor >= minor;\n  }\n});","define(\"ember-test-helpers/test-context\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.setContext = setContext;\n  exports.getContext = getContext;\n  exports.unsetContext = unsetContext;\n  var __test_context__;\n\n  function setContext(context) {\n    __test_context__ = context;\n  }\n\n  function getContext() {\n    return __test_context__;\n  }\n\n  function unsetContext() {\n    __test_context__ = undefined;\n  }\n});","define('ember-test-helpers/test-module-for-component', ['exports', './test-module', 'ember', './test-resolver', './has-ember-version'], function (exports, _testModule, _ember, _testResolver, _hasEmberVersion) {\n  'use strict';\n\n  exports['default'] = _testModule['default'].extend({\n    isComponentTestModule: true,\n\n    init: function init(componentName, description, callbacks) {\n      // Allow `description` to be omitted\n      if (!callbacks && typeof description === 'object') {\n        callbacks = description;\n        description = null;\n      } else if (!callbacks) {\n        callbacks = {};\n      }\n\n      this.componentName = componentName;\n\n      if (callbacks.needs || callbacks.unit || callbacks.integration === false) {\n        this.isUnitTest = true;\n      } else if (callbacks.integration) {\n        this.isUnitTest = false;\n      } else {\n        _ember['default'].deprecate(\"the component:\" + componentName + \" test module is implicitly running in unit test mode, \" + \"which will change to integration test mode by default in an upcoming version of \" + \"ember-test-helpers. Add `unit: true` or a `needs:[]` list to explicitly opt in to unit \" + \"test mode.\", false, { id: 'ember-test-helpers.test-module-for-component.test-type', until: '0.6.0' });\n        this.isUnitTest = true;\n      }\n\n      if (description) {\n        this._super.call(this, 'component:' + componentName, description, callbacks);\n      } else {\n        this._super.call(this, 'component:' + componentName, callbacks);\n      }\n\n      if (!this.isUnitTest && !this.isLegacy) {\n        callbacks.integration = true;\n      }\n\n      if (this.isUnitTest || this.isLegacy) {\n        this.setupSteps.push(this.setupComponentUnitTest);\n      } else {\n        this.callbacks.subject = function () {\n          throw new Error(\"component integration tests do not support `subject()`. Instead, render the component as if it were HTML: `this.render('<my-component foo=true>');`. For more information, read: http://guides.emberjs.com/v2.2.0/testing/testing-components/\");\n        };\n        this.setupSteps.push(this.setupComponentIntegrationTest);\n        this.teardownSteps.unshift(this.teardownComponent);\n      }\n\n      if (_ember['default'].View && _ember['default'].View.views) {\n        this.setupSteps.push(this._aliasViewRegistry);\n        this.teardownSteps.unshift(this._resetViewRegistry);\n      }\n    },\n\n    _aliasViewRegistry: function _aliasViewRegistry() {\n      this._originalGlobalViewRegistry = _ember['default'].View.views;\n      var viewRegistry = this.container.lookup('-view-registry:main');\n\n      if (viewRegistry) {\n        _ember['default'].View.views = viewRegistry;\n      }\n    },\n\n    _resetViewRegistry: function _resetViewRegistry() {\n      _ember['default'].View.views = this._originalGlobalViewRegistry;\n    },\n\n    setupComponentUnitTest: function setupComponentUnitTest() {\n      var _this = this;\n      var resolver = _testResolver.getResolver();\n      var context = this.context;\n\n      var layoutName = 'template:components/' + this.componentName;\n\n      var layout = resolver.resolve(layoutName);\n\n      var thingToRegisterWith = this.registry || this.container;\n      if (layout) {\n        thingToRegisterWith.register(layoutName, layout);\n        thingToRegisterWith.injection(this.subjectName, 'layout', layoutName);\n      }\n\n      context.dispatcher = this.container.lookup('event_dispatcher:main') || _ember['default'].EventDispatcher.create();\n      context.dispatcher.setup({}, '#ember-testing');\n\n      this.callbacks.render = function () {\n        var subject;\n\n        _ember['default'].run(function () {\n          subject = context.subject();\n          subject.appendTo('#ember-testing');\n        });\n\n        _this.teardownSteps.unshift(function () {\n          _ember['default'].run(function () {\n            _ember['default'].tryInvoke(subject, 'destroy');\n          });\n        });\n      };\n\n      this.callbacks.append = function () {\n        _ember['default'].deprecate('this.append() is deprecated. Please use this.render() or this.$() instead.', false, { id: 'ember-test-helpers.test-module-for-component.append', until: '0.6.0' });\n        return context.$();\n      };\n\n      context.$ = function () {\n        this.render();\n        var subject = this.subject();\n\n        return subject.$.apply(subject, arguments);\n      };\n    },\n\n    setupComponentIntegrationTest: function setupComponentIntegrationTest() {\n      var module = this;\n      var context = this.context;\n\n      this.actionHooks = {};\n\n      context.dispatcher = this.container.lookup('event_dispatcher:main') || _ember['default'].EventDispatcher.create();\n      context.dispatcher.setup({}, '#ember-testing');\n      context.actions = module.actionHooks;\n\n      (this.registry || this.container).register('component:-test-holder', _ember['default'].Component.extend());\n\n      context.render = function (template) {\n        if (!template) {\n          throw new Error(\"in a component integration test you must pass a template to `render()`\");\n        }\n        if (_ember['default'].isArray(template)) {\n          template = template.join('');\n        }\n        if (typeof template === 'string') {\n          template = _ember['default'].Handlebars.compile(template);\n        }\n        module.component = module.container.lookupFactory('component:-test-holder').create({\n          layout: template\n        });\n\n        module.component.set('context', context);\n        module.component.set('controller', context);\n\n        _ember['default'].run(function () {\n          module.component.appendTo('#ember-testing');\n        });\n      };\n\n      context.$ = function () {\n        return module.component.$.apply(module.component, arguments);\n      };\n\n      context.set = function (key, value) {\n        var ret = _ember['default'].run(function () {\n          return _ember['default'].set(context, key, value);\n        });\n\n        if (_hasEmberVersion['default'](2, 0)) {\n          return ret;\n        }\n      };\n\n      context.setProperties = function (hash) {\n        var ret = _ember['default'].run(function () {\n          return _ember['default'].setProperties(context, hash);\n        });\n\n        if (_hasEmberVersion['default'](2, 0)) {\n          return ret;\n        }\n      };\n\n      context.get = function (key) {\n        return _ember['default'].get(context, key);\n      };\n\n      context.getProperties = function () {\n        var args = Array.prototype.slice.call(arguments);\n        return _ember['default'].getProperties(context, args);\n      };\n\n      context.on = function (actionName, handler) {\n        module.actionHooks[actionName] = handler;\n      };\n\n      context.send = function (actionName) {\n        var hook = module.actionHooks[actionName];\n        if (!hook) {\n          throw new Error(\"integration testing template received unexpected action \" + actionName);\n        }\n        hook.apply(module, Array.prototype.slice.call(arguments, 1));\n      };\n    },\n\n    setupContext: function setupContext() {\n      this._super.call(this);\n\n      // only setup the injection if we are running against a version\n      // of Ember that has `-view-registry:main` (Ember >= 1.12)\n      if (this.container.lookupFactory('-view-registry:main')) {\n        (this.registry || this.container).injection('component', '_viewRegistry', '-view-registry:main');\n      }\n\n      if (!this.isUnitTest && !this.isLegacy) {\n        this.context.factory = function () {};\n      }\n    },\n\n    teardownComponent: function teardownComponent() {\n      var component = this.component;\n      if (component) {\n        _ember['default'].run(function () {\n          component.destroy();\n        });\n      }\n    }\n  });\n});","define('ember-test-helpers/test-module-for-model', ['exports', './test-module', 'ember'], function (exports, _testModule, _ember) {\n  /* global DS */ // added here to prevent an import from erroring when ED is not present\n\n  'use strict';\n\n  exports['default'] = _testModule['default'].extend({\n    init: function init(modelName, description, callbacks) {\n      this.modelName = modelName;\n\n      this._super.call(this, 'model:' + modelName, description, callbacks);\n\n      this.setupSteps.push(this.setupModel);\n    },\n\n    setupModel: function setupModel() {\n      var container = this.container;\n      var defaultSubject = this.defaultSubject;\n      var callbacks = this.callbacks;\n      var modelName = this.modelName;\n\n      var adapterFactory = container.lookupFactory('adapter:application');\n      if (!adapterFactory) {\n        adapterFactory = DS.JSONAPIAdapter || DS.FixtureAdapter;\n\n        var thingToRegisterWith = this.registry || this.container;\n        thingToRegisterWith.register('adapter:application', adapterFactory);\n      }\n\n      callbacks.store = function () {\n        var container = this.container;\n        var store = container.lookup('service:store') || container.lookup('store:main');\n        return store;\n      };\n\n      if (callbacks.subject === defaultSubject) {\n        callbacks.subject = function (options) {\n          var container = this.container;\n\n          return _ember['default'].run(function () {\n            var store = container.lookup('service:store') || container.lookup('store:main');\n            return store.createRecord(modelName, options);\n          });\n        };\n      }\n    }\n  });\n});","define('ember-test-helpers/test-module', ['exports', 'ember', './test-context', 'klassy', './test-resolver', './build-registry', './has-ember-version', './wait'], function (exports, _ember, _testContext, _klassy, _testResolver, _buildRegistry, _hasEmberVersion, _wait) {\n  'use strict';\n\n  exports['default'] = _klassy.Klass.extend({\n    init: function init(subjectName, description, callbacks) {\n      // Allow `description` to be omitted, in which case it should\n      // default to `subjectName`\n      if (!callbacks && typeof description === 'object') {\n        callbacks = description;\n        description = subjectName;\n      }\n\n      this.subjectName = subjectName;\n      this.description = description || subjectName;\n      this.name = description || subjectName;\n      this.callbacks = callbacks || {};\n\n      if (this.callbacks.integration && this.callbacks.needs) {\n        throw new Error(\"cannot declare 'integration: true' and 'needs' in the same module\");\n      }\n\n      if (this.callbacks.integration) {\n        if (this.isComponentTestModule) {\n          this.isLegacy = callbacks.integration === 'legacy';\n          this.isIntegration = callbacks.integration !== 'legacy';\n        } else {\n          if (callbacks.integration === 'legacy') {\n            throw new Error('`integration: \\'legacy\\'` is only valid for component tests.');\n          }\n          this.isIntegration = true;\n        }\n\n        delete callbacks.integration;\n      }\n\n      this.initSubject();\n      this.initNeeds();\n      this.initSetupSteps();\n      this.initTeardownSteps();\n    },\n\n    initSubject: function initSubject() {\n      this.callbacks.subject = this.callbacks.subject || this.defaultSubject;\n    },\n\n    initNeeds: function initNeeds() {\n      this.needs = [this.subjectName];\n      if (this.callbacks.needs) {\n        this.needs = this.needs.concat(this.callbacks.needs);\n        delete this.callbacks.needs;\n      }\n    },\n\n    initSetupSteps: function initSetupSteps() {\n      this.setupSteps = [];\n      this.contextualizedSetupSteps = [];\n\n      if (this.callbacks.beforeSetup) {\n        this.setupSteps.push(this.callbacks.beforeSetup);\n        delete this.callbacks.beforeSetup;\n      }\n\n      this.setupSteps.push(this.setupContainer);\n      this.setupSteps.push(this.setupContext);\n      this.setupSteps.push(this.setupTestElements);\n      this.setupSteps.push(this.setupAJAXListeners);\n\n      if (this.callbacks.setup) {\n        this.contextualizedSetupSteps.push(this.callbacks.setup);\n        delete this.callbacks.setup;\n      }\n    },\n\n    initTeardownSteps: function initTeardownSteps() {\n      this.teardownSteps = [];\n      this.contextualizedTeardownSteps = [];\n\n      if (this.callbacks.teardown) {\n        this.contextualizedTeardownSteps.push(this.callbacks.teardown);\n        delete this.callbacks.teardown;\n      }\n\n      this.teardownSteps.push(this.teardownSubject);\n      this.teardownSteps.push(this.teardownContainer);\n      this.teardownSteps.push(this.teardownContext);\n      this.teardownSteps.push(this.teardownTestElements);\n      this.teardownSteps.push(this.teardownAJAXListeners);\n\n      if (this.callbacks.afterTeardown) {\n        this.teardownSteps.push(this.callbacks.afterTeardown);\n        delete this.callbacks.afterTeardown;\n      }\n    },\n\n    setup: function setup() {\n      var self = this;\n      return self.invokeSteps(self.setupSteps).then(function () {\n        self.contextualizeCallbacks();\n        return self.invokeSteps(self.contextualizedSetupSteps, self.context);\n      });\n    },\n\n    teardown: function teardown() {\n      var self = this;\n      return self.invokeSteps(self.contextualizedTeardownSteps, self.context).then(function () {\n        return self.invokeSteps(self.teardownSteps);\n      }).then(function () {\n        self.cache = null;\n        self.cachedCalls = null;\n      });\n    },\n\n    invokeSteps: function invokeSteps(steps, _context) {\n      var context = _context;\n      if (!context) {\n        context = this;\n      }\n      steps = steps.slice();\n      function nextStep() {\n        var step = steps.shift();\n        if (step) {\n          // guard against exceptions, for example missing components referenced from needs.\n          return new _ember['default'].RSVP.Promise(function (ok) {\n            ok(step.call(context));\n          }).then(nextStep);\n        } else {\n          return _ember['default'].RSVP.resolve();\n        }\n      }\n      return nextStep();\n    },\n\n    setupContainer: function setupContainer() {\n      if (this.isIntegration || this.isLegacy) {\n        this._setupIntegratedContainer();\n      } else {\n        this._setupIsolatedContainer();\n      }\n    },\n\n    setupContext: function setupContext() {\n      var subjectName = this.subjectName;\n      var container = this.container;\n\n      var factory = function factory() {\n        return container.lookupFactory(subjectName);\n      };\n\n      _testContext.setContext({\n        container: this.container,\n        registry: this.registry,\n        factory: factory,\n        dispatcher: null,\n        register: function register() {\n          var target = this.registry || this.container;\n          return target.register.apply(target, arguments);\n        },\n        inject: {}\n      });\n\n      var context = this.context = _testContext.getContext();\n\n      if (_ember['default'].setOwner) {\n        _ember['default'].setOwner(context, this.container.owner);\n      }\n\n      if (_ember['default'].inject) {\n        var keys = (Object.keys || _ember['default'].keys)(_ember['default'].inject);\n        keys.forEach(function (typeName) {\n          context.inject[typeName] = function (name, opts) {\n            var alias = opts && opts.as || name;\n            _ember['default'].set(context, alias, context.container.lookup(typeName + ':' + name));\n          };\n        });\n      }\n    },\n\n    setupTestElements: function setupTestElements() {\n      if (_ember['default'].$('#ember-testing').length === 0) {\n        _ember['default'].$('<div id=\"ember-testing\"/>').appendTo(document.body);\n      }\n    },\n\n    setupAJAXListeners: function setupAJAXListeners() {\n      _wait._setupAJAXHooks();\n    },\n\n    teardownSubject: function teardownSubject() {\n      var subject = this.cache.subject;\n\n      if (subject) {\n        _ember['default'].run(function () {\n          _ember['default'].tryInvoke(subject, 'destroy');\n        });\n      }\n    },\n\n    teardownContainer: function teardownContainer() {\n      var container = this.container;\n      _ember['default'].run(function () {\n        container.destroy();\n      });\n    },\n\n    teardownContext: function teardownContext() {\n      var context = this.context;\n      this.context = undefined;\n      _testContext.unsetContext();\n\n      if (context.dispatcher && !context.dispatcher.isDestroyed) {\n        _ember['default'].run(function () {\n          context.dispatcher.destroy();\n        });\n      }\n    },\n\n    teardownTestElements: function teardownTestElements() {\n      _ember['default'].$('#ember-testing').empty();\n\n      // Ember 2.0.0 removed Ember.View as public API, so only do this when\n      // Ember.View is present\n      if (_ember['default'].View && _ember['default'].View.views) {\n        _ember['default'].View.views = {};\n      }\n    },\n\n    teardownAJAXListeners: function teardownAJAXListeners() {\n      _wait._teardownAJAXHooks();\n    },\n\n    defaultSubject: function defaultSubject(options, factory) {\n      return factory.create(options);\n    },\n\n    // allow arbitrary named factories, like rspec let\n    contextualizeCallbacks: function contextualizeCallbacks() {\n      var callbacks = this.callbacks;\n      var context = this.context;\n\n      this.cache = this.cache || {};\n      this.cachedCalls = this.cachedCalls || {};\n\n      var keys = (Object.keys || _ember['default'].keys)(callbacks);\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        this._contextualizeCallback(context, keys[i]);\n      }\n    },\n\n    _contextualizeCallback: function _contextualizeCallback(context, key) {\n      var _this = this;\n      var callbacks = this.callbacks;\n      var factory = context.factory;\n\n      context[key] = function (options) {\n        if (_this.cachedCalls[key]) {\n          return _this.cache[key];\n        }\n\n        var result = callbacks[key].call(_this, options, factory());\n\n        _this.cache[key] = result;\n        _this.cachedCalls[key] = true;\n\n        return result;\n      };\n    },\n\n    _setupContainer: function _setupContainer(isolated) {\n      var resolver = _testResolver.getResolver();\n\n      var items = _buildRegistry['default'](!isolated ? resolver : Object.create(resolver, {\n        resolve: {\n          value: function value() {}\n        }\n      }));\n\n      this.container = items.container;\n      this.registry = items.registry;\n\n      if (_hasEmberVersion['default'](1, 13)) {\n        var thingToRegisterWith = this.registry || this.container;\n        var router = resolver.resolve('router:main');\n        router = router || _ember['default'].Router.extend();\n        thingToRegisterWith.register('router:main', router);\n      }\n    },\n\n    _setupIsolatedContainer: function _setupIsolatedContainer() {\n      var resolver = _testResolver.getResolver();\n      this._setupContainer(true);\n\n      var thingToRegisterWith = this.registry || this.container;\n\n      for (var i = this.needs.length; i > 0; i--) {\n        var fullName = this.needs[i - 1];\n        var normalizedFullName = resolver.normalize(fullName);\n        thingToRegisterWith.register(fullName, resolver.resolve(normalizedFullName));\n      }\n\n      if (!this.registry) {\n        this.container.resolver = function () {};\n      }\n    },\n\n    _setupIntegratedContainer: function _setupIntegratedContainer() {\n      this._setupContainer();\n    }\n\n  });\n});","define('ember-test-helpers/test-resolver', ['exports'], function (exports) {\n  'use strict';\n\n  exports.setResolver = setResolver;\n  exports.getResolver = getResolver;\n  var __resolver__;\n\n  function setResolver(resolver) {\n    __resolver__ = resolver;\n  }\n\n  function getResolver() {\n    if (__resolver__ == null) {\n      throw new Error('you must set a resolver with `testResolver.set(resolver)`');\n    }\n\n    return __resolver__;\n  }\n});","define('ember-test-helpers/wait', ['exports', 'ember'], function (exports, _ember) {\n  /* globals jQuery, self */\n\n  'use strict';\n\n  exports._teardownAJAXHooks = _teardownAJAXHooks;\n  exports._setupAJAXHooks = _setupAJAXHooks;\n  exports['default'] = wait;\n\n  var requests;\n  function incrementAjaxPendingRequests(_, xhr) {\n    requests.push(xhr);\n  }\n\n  function decrementAjaxPendingRequests(_, xhr) {\n    for (var i = 0; i < requests.length; i++) {\n      if (xhr === requests[i]) {\n        requests.splice(i, 1);\n      }\n    }\n  }\n\n  function _teardownAJAXHooks() {\n    jQuery(document).off('ajaxSend', incrementAjaxPendingRequests);\n    jQuery(document).off('ajaxComplete', decrementAjaxPendingRequests);\n  }\n\n  function _setupAJAXHooks() {\n    requests = [];\n\n    jQuery(document).on('ajaxSend', incrementAjaxPendingRequests);\n    jQuery(document).on('ajaxComplete', decrementAjaxPendingRequests);\n  }\n\n  function wait(_options) {\n    var options = _options || {};\n    var waitForTimers = options.hasOwnProperty('waitForTimers') ? options.waitForTimers : true;\n    var waitForAJAX = options.hasOwnProperty('waitForAJAX') ? options.waitForAJAX : true;\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      var watcher = self.setInterval(function () {\n        if (waitForTimers && (_ember['default'].run.hasScheduledTimers() || _ember['default'].run.currentRunLoop)) {\n          return;\n        }\n\n        if (waitForAJAX && requests && requests.length > 0) {\n          return;\n        }\n\n        // Stop polling\n        self.clearInterval(watcher);\n\n        // Synchronously resolve the promise\n        _ember['default'].run(null, resolve);\n      }, 10);\n    });\n  }\n});","define('ember-test-helpers', ['exports', 'ember', 'ember-test-helpers/test-module', 'ember-test-helpers/test-module-for-component', 'ember-test-helpers/test-module-for-model', 'ember-test-helpers/test-context', 'ember-test-helpers/test-resolver'], function (exports, _ember, _emberTestHelpersTestModule, _emberTestHelpersTestModuleForComponent, _emberTestHelpersTestModuleForModel, _emberTestHelpersTestContext, _emberTestHelpersTestResolver) {\n  'use strict';\n\n  _ember['default'].testing = true;\n\n  exports.TestModule = _emberTestHelpersTestModule['default'];\n  exports.TestModuleForComponent = _emberTestHelpersTestModuleForComponent['default'];\n  exports.TestModuleForModel = _emberTestHelpersTestModuleForModel['default'];\n  exports.getContext = _emberTestHelpersTestContext.getContext;\n  exports.setContext = _emberTestHelpersTestContext.setContext;\n  exports.setResolver = _emberTestHelpersTestResolver.setResolver;\n});","define('klassy', ['exports'], function (exports) {\n  /**\n   Extend a class with the properties and methods of one or more other classes.\n  \n   When a method is replaced with another method, it will be wrapped in a\n   function that makes the replaced method accessible via `this._super`.\n  \n   @method extendClass\n   @param {Object} destination The class to merge into\n   @param {Object} source One or more source classes\n   */\n  'use strict';\n\n  var extendClass = function extendClass(destination) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    var source;\n\n    for (var i = 0, l = sources.length; i < l; i++) {\n      source = sources[i];\n\n      for (var p in source) {\n        if (source.hasOwnProperty(p) && destination[p] && typeof destination[p] === 'function' && typeof source[p] === 'function') {\n\n          /* jshint loopfunc:true */\n          destination[p] = (function (destinationFn, sourceFn) {\n            var wrapper = function wrapper() {\n              var prevSuper = this._super;\n              this._super = destinationFn;\n\n              var ret = sourceFn.apply(this, arguments);\n\n              this._super = prevSuper;\n\n              return ret;\n            };\n            wrapper.wrappedFunction = sourceFn;\n            return wrapper;\n          })(destination[p], source[p]);\n        } else {\n          destination[p] = source[p];\n        }\n      }\n    }\n  };\n\n  // `subclassing` is a state flag used by `defineClass` to track when a class is\n  // being subclassed. It allows constructors to avoid calling `init`, which can\n  // be expensive and cause undesirable side effects.\n  var subclassing = false;\n\n  /**\n   Define a new class with the properties and methods of one or more other classes.\n  \n   The new class can be based on a `SuperClass`, which will be inserted into its\n   prototype chain.\n  \n   Furthermore, one or more mixins (object that contain properties and/or methods)\n   may be specified, which will be applied in order. When a method is replaced\n   with another method, it will be wrapped in a function that makes the previous\n   method accessible via `this._super`.\n  \n   @method defineClass\n   @param {Object} SuperClass A base class to extend. If `mixins` are to be included\n   without a `SuperClass`, pass `null` for SuperClass.\n   @param {Object} mixins One or more objects that contain properties and methods\n   to apply to the new class.\n   */\n  var defineClass = function defineClass(SuperClass) {\n    var Klass = function Klass() {\n      if (!subclassing && this.init) {\n        this.init.apply(this, arguments);\n      }\n    };\n\n    if (SuperClass) {\n      subclassing = true;\n      Klass.prototype = new SuperClass();\n      subclassing = false;\n    }\n\n    if (arguments.length > 1) {\n      var extendArgs = Array.prototype.slice.call(arguments, 1);\n      extendArgs.unshift(Klass.prototype);\n      extendClass.apply(Klass.prototype, extendArgs);\n    }\n\n    Klass.constructor = Klass;\n\n    Klass.extend = function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n      args.unshift(Klass);\n      return defineClass.apply(Klass, args);\n    };\n\n    return Klass;\n  };\n\n  /**\n   A base class that can be extended.\n  \n   @example\n  \n   ```javascript\n   var CelestialObject = Klass.extend({\n     init: function(name) {\n       this._super();\n       this.name = name;\n       this.isCelestialObject = true;\n     },\n     greeting: function() {\n       return 'Hello from ' + this.name;\n     }\n   });\n  \n   var Planet = CelestialObject.extend({\n     init: function(name) {\n       this._super.apply(this, arguments);\n       this.isPlanet = true;\n     },\n     greeting: function() {\n       return this._super() + '!';\n     },\n   });\n  \n   var earth = new Planet('Earth');\n  \n   console.log(earth instanceof Klass);           // true\n   console.log(earth instanceof CelestialObject); // true\n   console.log(earth instanceof Planet);          // true\n  \n   console.log(earth.isCelestialObject);          // true\n   console.log(earth.isPlanet);                   // true\n  \n   console.log(earth.greeting());                 // 'Hello from Earth!'\n   ```\n  \n   @class Klass\n   */\n  var Klass = defineClass(null, {\n    init: function init() {}\n  });\n\n  exports.Klass = Klass;\n  exports.defineClass = defineClass;\n  exports.extendClass = extendClass;\n});","define(\"qunit\", [\"exports\"], function (exports) {\n  /* globals test:true */\n\n  \"use strict\";\n\n  var _module = QUnit.module;\n  exports.module = _module;\n  var test = QUnit.test;\n  exports.test = test;\n  var skip = QUnit.skip;\n  exports.skip = skip;\n  var only = QUnit.only;\n\n  exports.only = only;\n  exports[\"default\"] = QUnit;\n});"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrrTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"ember-qunit.js"}